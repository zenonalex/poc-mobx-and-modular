// Mocks generated by Mockito 5.0.10 from annotations
// in clean3/test/modules/characters/domain/usecases/get_characters_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:clean3/core/errors/failure.dart' as _i5;
import 'package:clean3/modules/characters/domain/entities/character.dart'
    as _i6;
import 'package:clean3/modules/characters/domain/repositories/characters_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {
  @override
  String toString() => super.toString();
}

/// A class which mocks [CharactersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharactersRepository extends _i1.Mock
    implements _i3.CharactersRepository {
  MockCharactersRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Character>>> characters() =>
      (super.noSuchMethod(Invocation.method(#characters, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i6.Character>>>.value(
                      _FakeEither<_i5.Failure, List<_i6.Character>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Character>>>);
}

/// A class which mocks [Character].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacter extends _i1.Mock implements _i6.Character {
  MockCharacter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  String get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: '') as String);
  @override
  bool get isFavorite =>
      (super.noSuchMethod(Invocation.getter(#isFavorite), returnValue: false)
          as bool);
  @override
  set isFavorite(bool? _isFavorite) =>
      super.noSuchMethod(Invocation.setter(#isFavorite, _isFavorite),
          returnValueForMissingStub: null);
}
